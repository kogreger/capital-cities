-- identify subtrip origin locations (incl. starting hour and transportation mode)
SELECT p.puid id, s.pid, s.tno, s.sno, s.tmodec, p.geom, date_part('hour', s.pdate_s) phour_s 
FROM dhk09.point p 
JOIN dhk09.subtrip s ON p.puid = s.puid_s 
WHERE s.tmodec != 99 AND s.tmodec != 97


-- identify trip origin locations (incl. starting hour and purpose)
SELECT p.puid id, t.pid, t.tno, t.purpose, t.activity, p.geom, date_part('hour', t.pdate_s) phour_s 
FROM dhk09.point p 
JOIN dhk09.trip t ON p.puid = t.puid_s


-- count trip origins per buffer zone and hour
SELECT b.radius, date_part('hour', t.pdate_s) phour_s, COUNT(*) trip_origins 
FROM geodata.buffers_5km b, dhk09.trip t, dhk09.point p 
WHERE t.puid_s = p.puid AND ST_Intersects(p.geom, b.geom) 
GROUP BY b.radius, date_part('hour', t.pdate_s) 
ORDER BY date_part('hour', t.pdate_s), b.radius;


-- count number of distinct people per buffer zone and hour
SELECT b.radius, date_part('hour', p.pdate) phour, COUNT(DISTINCT pid) pcount 
FROM geodata.buffers_5km b, dhk09.point p 
WHERE b.radius = 50 AND date_part('hour', p.pdate) = 2 AND ST_Intersects(p.geom, b.geom) 
GROUP BY b.radius, date_part('hour', p.pdate) 
ORDER BY date_part('hour', p.pdate), b.radius;


-- analyze commuting distance, duration, and intermediate stops
WITH subtrip_info AS
(
	SELECT pid, tno, COUNT(sno) subtrips
	FROM dhk09.subtrip 
	GROUP BY pid, tno
)
SELECT t.pid, t.tno, t.activity, t.pdate_s, s.subtrips, t.dist, (t.pdate_e - t.pdate_s) duration  
FROM dhk09.trip t 
JOIN subtrip_info s ON t.pid = s.pid AND t.tno = s.tno 
WHERE t.activity IN (1, 2, 3) AND 
(
	SELECT activity 
	FROM dhk09.trip x 
	WHERE x.pid = t.pid AND x.tno = (t.tno - 1)
) IN (1, 2, 3, 99) 
ORDER BY pid, tno;



-- load PostGIS layer with query in QGIS
uri = QgsDataSourceURI()
uri.setConnection("server", "port", "database", "user", "password")
uri.setDataSource("schema", "table", "geom", "sql_query", "key")
uri.uri()
qgis.utils.iface.addVectorLayer(uri.uri(), "layer_name", "postgres")